import express from "express";
import { createServer } from "http";
import { createServer as createHttpsServer } from "https";
import { Server as SocketIOServer } from "socket.io";
import path from "path";
import { networkInterfaces } from "os";
import fs from "fs";

interface User {
  id: string;
  username: string;
  isSharing: boolean;
  shareType?: "screen" | "window" | "tab";
}

interface ShareSession {
  hostId: string;
  hostUsername: string;
  shareType: "screen" | "window" | "tab";
  viewers: Set<string>;
  startTime: Date;
}

const app = express();

// HTTPSÁî®„ÅÆË®ºÊòéÊõ∏„ÇíÁ¢∫Ë™ç„ÉªÁîüÊàê
function ensureSSLCertificates(): { key: Buffer; cert: Buffer } | null {
  const keyPath = path.join(__dirname, "../ssl/key.pem");
  const certPath = path.join(__dirname, "../ssl/cert.pem");

  console.log("SSLË®ºÊòéÊõ∏„ÅÆÁ¢∫Ë™ç‰∏≠...");
  console.log(`ÁßòÂØÜÈçµ„Éë„Çπ: ${keyPath}`);
  console.log(`Ë®ºÊòéÊõ∏„Éë„Çπ: ${certPath}`);

  try {
    // „Éï„Ç°„Ç§„É´„ÅÆÂ≠òÂú®Á¢∫Ë™ç
    if (!fs.existsSync(keyPath)) {
      console.error(`‚ùå ÁßòÂØÜÈçµ„Éï„Ç°„Ç§„É´„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì: ${keyPath}`);
      return null;
    }

    if (!fs.existsSync(certPath)) {
      console.error(`‚ùå Ë®ºÊòéÊõ∏„Éï„Ç°„Ç§„É´„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì: ${certPath}`);
      return null;
    }

    // „Éï„Ç°„Ç§„É´„ÅÆË™≠„ÅøËæº„ÅøÁ¢∫Ë™ç
    const keyStats = fs.statSync(keyPath);
    const certStats = fs.statSync(certPath);

    console.log(`üîë ÁßòÂØÜÈçµ„Çµ„Ç§„Ç∫: ${keyStats.size} bytes`);
    console.log(`üìú Ë®ºÊòéÊõ∏„Çµ„Ç§„Ç∫: ${certStats.size} bytes`);

    if (keyStats.size === 0 || certStats.size === 0) {
      console.error("‚ùå SSLË®ºÊòéÊõ∏„Éï„Ç°„Ç§„É´„ÅåÁ©∫„Åß„Åô");
      return null;
    }

    const key = fs.readFileSync(keyPath);
    const cert = fs.readFileSync(certPath);

    console.log("‚úÖ SSLË®ºÊòéÊõ∏„ÅÆË™≠„ÅøËæº„Åø„Å´ÊàêÂäü„Åó„Åæ„Åó„Åü");
    return { key, cert };
  } catch (error) {
    console.error("‚ùå SSLË®ºÊòéÊõ∏„ÅÆË™≠„ÅøËæº„Åø„Å´Â§±Êïó„Åó„Åæ„Åó„Åü:");
    console.error(error instanceof Error ? error.message : error);
    return null;
  }
}

// ÈùôÁöÑ„Éï„Ç°„Ç§„É´ÈÖç‰ø°
app.use(express.static(path.join(__dirname, "../public")));

// „É°„Ç§„É≥„Éö„Éº„Ç∏
app.get("/", (req, res) => {
  res.sendFile(path.join(__dirname, "../public/index.html"));
});

// „Éò„É´„Çπ„ÉÅ„Çß„ÉÉ„ÇØÁî®„Ç®„É≥„Éâ„Éù„Ç§„É≥„Éà
app.get("/health", (req, res) => {
  res.json({
    status: "ok",
    timestamp: new Date().toISOString(),
    connections: users.size,
    activeSessions: shareSessions.size,
  });
});

// „É¶„Éº„Ç∂„ÉºÁÆ°ÁêÜ
const users = new Map<string, User>();
const shareSessions = new Map<string, ShareSession>();

// „É≠„Éº„Ç´„É´IP„Ç¢„Éâ„É¨„ÇπÂèñÂæó
function getLocalIPAddress(): string {
  const interfaces = networkInterfaces();
  for (const name of Object.keys(interfaces)) {
    const nets = interfaces[name];
    if (nets) {
      for (const net of nets) {
        if (net.family === "IPv4" && !net.internal) {
          return net.address;
        }
      }
    }
  }
  return "localhost";
}

// „Çµ„Éº„Éê„Éº‰ΩúÊàê
const httpServer = createServer(app);
let httpsServer: any = null;
let sslCredentials: { key: Buffer; cert: Buffer } | null = null;

try {
  sslCredentials = ensureSSLCertificates();
  if (sslCredentials) {
    console.log("üîí HTTPSÁî®„ÅÆË®ºÊòéÊõ∏„Çí‰ΩøÁî®„Åó„Å¶„Çµ„Éº„Éê„Éº„Çí‰ΩúÊàê‰∏≠...");
    httpsServer = createHttpsServer(sslCredentials, app);
    console.log("‚úÖ HTTPS„Çµ„Éº„Éê„Éº„ÅÆ‰ΩúÊàê„Å´ÊàêÂäü„Åó„Åæ„Åó„Åü");
  } else {
    console.log(
      "‚ö†Ô∏è  SSLË®ºÊòéÊõ∏„ÅåË¶ã„Å§„Åã„Çâ„Å™„ÅÑ„Åü„ÇÅ„ÄÅHTTPS„Çµ„Éº„Éê„Éº„ÅØ‰ΩúÊàê„Åï„Çå„Åæ„Åõ„Çì"
    );
  }
} catch (error) {
  console.error("‚ùå HTTPS„Çµ„Éº„Éê„Éº„ÅÆ‰ΩúÊàê„Å´Â§±Êïó„Åó„Åæ„Åó„Åü:");
  console.error(error instanceof Error ? error.message : error);
  httpsServer = null;
}

// Socket.IOË®≠ÂÆö
const httpIO = new SocketIOServer(httpServer, {
  cors: {
    origin: "*",
    methods: ["GET", "POST"],
  },
});

let httpsIO: any = null;
if (httpsServer) {
  try {
    httpsIO = new SocketIOServer(httpsServer, {
      cors: {
        origin: "*",
        methods: ["GET", "POST"],
      },
    });
    console.log("‚úÖ HTTPS Socket.IO„ÅÆÂàùÊúüÂåñ„Å´ÊàêÂäü„Åó„Åæ„Åó„Åü");
  } catch (error) {
    console.error("‚ùå HTTPS Socket.IO„ÅÆÂàùÊúüÂåñ„Å´Â§±Êïó„Åó„Åæ„Åó„Åü:");
    console.error(error instanceof Error ? error.message : error);
    httpsIO = null;
  }
}

// Socket.IOÊé•Á∂öÂá¶ÁêÜ„ÇíÈñ¢Êï∞Âåñ
function handleSocketConnection(socket: any, ioInstance: any) {
  console.log("Êñ∞„Åó„ÅÑÊé•Á∂ö:", socket.id);

  // „É¶„Éº„Ç∂„ÉºÂêçË®≠ÂÆö
  socket.on("set-username", (username: string) => {
    const user: User = {
      id: socket.id,
      username,
      isSharing: false,
    };
    users.set(socket.id, user);

    socket.emit("username-set", username);
    socket.emit("user-list", Array.from(users.values()));
    socket.emit(
      "active-shares",
      Array.from(shareSessions.values()).map((session) => ({
        hostId: session.hostId,
        hostUsername: session.hostUsername,
        shareType: session.shareType,
        viewerCount: session.viewers.size,
        startTime: session.startTime,
      }))
    );

    socket.broadcast.emit("user-joined", { username, userCount: users.size });
  });

  // ÁîªÈù¢ÂÖ±ÊúâÈñãÂßã
  socket.on(
    "start-sharing",
    (data: { shareType: "screen" | "window" | "tab" }) => {
      const user = users.get(socket.id);
      if (!user) return;

      // Êó¢Â≠ò„ÅÆÂÖ±Êúâ„Çª„ÉÉ„Ç∑„Éß„É≥„ÇíÂÅúÊ≠¢
      if (user.isSharing) {
        socket.emit("error", "„Åô„Åß„Å´ÁîªÈù¢ÂÖ±Êúâ‰∏≠„Åß„Åô");
        return;
      }

      user.isSharing = true;
      user.shareType = data.shareType;

      const session: ShareSession = {
        hostId: socket.id,
        hostUsername: user.username,
        shareType: data.shareType,
        viewers: new Set(),
        startTime: new Date(),
      };

      shareSessions.set(socket.id, session);

      socket.emit("sharing-started");
      socket.broadcast.emit("share-available", {
        hostId: socket.id,
        hostUsername: user.username,
        shareType: data.shareType,
      });

      console.log(`${user.username} „Åå ${data.shareType} „ÅÆÂÖ±Êúâ„ÇíÈñãÂßã„Åó„Åæ„Åó„Åü`);
    }
  );

  // ÁîªÈù¢ÂÖ±ÊúâÂÅúÊ≠¢
  socket.on("stop-sharing", () => {
    const user = users.get(socket.id);
    const session = shareSessions.get(socket.id);

    if (user && session) {
      user.isSharing = false;
      user.shareType = undefined;

      // Ë¶ñËÅ¥ËÄÖ„Å´ÈÄöÁü•
      session.viewers.forEach((viewerId) => {
        ioInstance.to(viewerId).emit("share-ended", { hostId: socket.id });
      });

      shareSessions.delete(socket.id);
      socket.broadcast.emit("share-unavailable", { hostId: socket.id });
      socket.emit("sharing-stopped");

      console.log(`${user.username} „ÅåÁîªÈù¢ÂÖ±Êúâ„ÇíÂÅúÊ≠¢„Åó„Åæ„Åó„Åü`);
    }
  });

  // Ë¶ñËÅ¥ÂèÇÂä†
  socket.on("join-viewer", (hostId: string) => {
    const session = shareSessions.get(hostId);
    const viewer = users.get(socket.id);

    if (session && viewer) {
      session.viewers.add(socket.id);
      socket.emit("joined-as-viewer", {
        hostId,
        hostUsername: session.hostUsername,
      });
      ioInstance.to(hostId).emit("viewer-joined", {
        viewerId: socket.id,
        viewerUsername: viewer.username,
        viewerCount: session.viewers.size,
      });

      console.log(
        `${viewer.username} „Åå ${session.hostUsername} „ÅÆÁîªÈù¢„ÇíË¶ñËÅ¥ÈñãÂßã`
      );
    }
  });

  // Ë¶ñËÅ¥Èõ¢ËÑ±
  socket.on("leave-viewer", (hostId: string) => {
    const session = shareSessions.get(hostId);
    const viewer = users.get(socket.id);

    if (session && viewer) {
      session.viewers.delete(socket.id);
      socket.emit("left-viewer");
      ioInstance.to(hostId).emit("viewer-left", {
        viewerId: socket.id,
        viewerUsername: viewer.username,
        viewerCount: session.viewers.size,
      });

      console.log(`${viewer.username} „ÅåË¶ñËÅ¥„ÇíÁµÇ‰∫Ü`);
    }
  });

  // WebRTC „Ç∑„Ç∞„Éä„É™„É≥„Ç∞
  socket.on(
    "offer",
    (data: { hostId: string; offer: RTCSessionDescriptionInit }) => {
      ioInstance
        .to(data.hostId)
        .emit("offer", { viewerId: socket.id, offer: data.offer });
    }
  );

  socket.on(
    "answer",
    (data: { viewerId: string; answer: RTCSessionDescriptionInit }) => {
      ioInstance
        .to(data.viewerId)
        .emit("answer", { hostId: socket.id, answer: data.answer });
    }
  );

  socket.on(
    "ice-candidate",
    (data: { targetId: string; candidate: RTCIceCandidateInit }) => {
      ioInstance.to(data.targetId).emit("ice-candidate", {
        fromId: socket.id,
        candidate: data.candidate,
      });
    }
  );

  // ÂàáÊñ≠Âá¶ÁêÜ
  socket.on("disconnect", () => {
    const user = users.get(socket.id);

    if (user) {
      // ÁîªÈù¢ÂÖ±Êúâ‰∏≠„ÅÆÂ†¥Âêà„ÅØÂÅúÊ≠¢
      if (user.isSharing) {
        const session = shareSessions.get(socket.id);
        if (session) {
          session.viewers.forEach((viewerId) => {
            ioInstance.to(viewerId).emit("share-ended", { hostId: socket.id });
          });
          shareSessions.delete(socket.id);
          socket.broadcast.emit("share-unavailable", { hostId: socket.id });
        }
      }

      // Ë¶ñËÅ¥‰∏≠„ÅÆÂ†¥Âêà„ÅØÈõ¢ËÑ±Âá¶ÁêÜ
      shareSessions.forEach((session, hostId) => {
        if (session.viewers.has(socket.id)) {
          session.viewers.delete(socket.id);
          ioInstance.to(hostId).emit("viewer-left", {
            viewerId: socket.id,
            viewerUsername: user.username,
            viewerCount: session.viewers.size,
          });
        }
      });

      users.delete(socket.id);
      socket.broadcast.emit("user-left", {
        username: user.username,
        userCount: users.size,
      });

      console.log(`${user.username} „ÅåÂàáÊñ≠„Åó„Åæ„Åó„Åü`);
    }
  });
}

// HTTP Socket.IOÊé•Á∂ö
httpIO.on("connection", (socket) => {
  handleSocketConnection(socket, httpIO);
});

// HTTPS Socket.IOÊé•Á∂ö
if (httpsIO) {
  httpsIO.on("connection", (socket: any) => {
    handleSocketConnection(socket, httpsIO);
  });
}

const PORT = parseInt(process.env.PORT || "3000", 10);
const HTTP_PORT = PORT + 1; // HTTP„Éù„Éº„Éà„ÅØ3001
const localIP = getLocalIPAddress();

// HTTPS„Çµ„Éº„Éê„Éº„ÇíËµ∑ÂãïÔºàSSLË®ºÊòéÊõ∏„Åå„ÅÇ„ÇãÂ†¥ÂêàÔºâ
if (httpsServer) {
  httpsServer.listen(PORT, "0.0.0.0", () => {
    console.log("=================================");
    console.log("üîí HTTPS„Çµ„Éº„Éê„Éº„ÅåËµ∑Âãï„Åó„Åæ„Åó„ÅüÔºÅ");
    console.log("=================================");
    console.log(`„É≠„Éº„Ç´„É´: https://localhost:${PORT}`);
    console.log(`„Éç„ÉÉ„Éà„ÉØ„Éº„ÇØ: https://${localIP}:${PORT}`);
    console.log("‚úÖ ÁîªÈù¢ÂÖ±ÊúâÊ©üËÉΩ„ÅåÂà©Áî®ÂèØËÉΩ„Åß„Åô");
    console.log("=================================");
  });

  httpsServer.on("error", (error: any) => {
    console.error("‚ùå HTTPS„Çµ„Éº„Éê„Éº„Åß„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü:");
    console.error(error);

    if (error.code === "EADDRINUSE") {
      console.error(`„Éù„Éº„Éà ${PORT} „ÅØÊó¢„Å´‰ΩøÁî®„Åï„Çå„Å¶„ÅÑ„Åæ„Åô`);
    } else if (error.code === "EACCES") {
      console.error(
        `„Éù„Éº„Éà ${PORT} „Å∏„ÅÆ„Ç¢„ÇØ„Çª„Çπ„ÅåÊãíÂê¶„Åï„Çå„Åæ„Åó„ÅüÔºàÁÆ°ÁêÜËÄÖÊ®©Èôê„ÅåÂøÖË¶Å„Åã„ÇÇ„Åó„Çå„Åæ„Åõ„ÇìÔºâ`
      );
    }
  });
} else {
  console.log("=================================");
  console.log("‚ö†Ô∏è  HTTPS„Çµ„Éº„Éê„Éº„ÇíËµ∑Âãï„Åß„Åç„Åæ„Åõ„Çì„Åß„Åó„Åü");
  console.log("=================================");
  console.log("SSLË®ºÊòéÊõ∏„ÇíÁîüÊàê„Åó„Å¶„Åè„Å†„Åï„ÅÑ:");
  console.log("npm run generate-ssl");
  console.log("=================================");
}

// HTTP„Çµ„Éº„Éê„Éº„ÇíËµ∑Âãï
httpServer.listen(HTTP_PORT, "0.0.0.0", () => {
  console.log("=================================");
  console.log("üåê HTTP„Çµ„Éº„Éê„Éº„ÅåËµ∑Âãï„Åó„Åæ„Åó„ÅüÔºÅ");
  console.log("=================================");
  console.log(`„É≠„Éº„Ç´„É´: http://localhost:${HTTP_PORT}`);
  console.log(`„Éç„ÉÉ„Éà„ÉØ„Éº„ÇØ: http://${localIP}:${HTTP_PORT}`);
  console.log("‚ö†Ô∏è  ÁîªÈù¢ÂÖ±Êúâ„ÅØlocalhostÊé•Á∂ö„Åß„ÅÆ„ÅøÂà©Áî®ÂèØËÉΩ");
  console.log("=================================");

  if (!httpsServer) {
    console.log("üí° ÁîªÈù¢ÂÖ±ÊúâÊ©üËÉΩ„Çí‰ΩøÁî®„Åô„Çã„Å´„ÅØ:");
    console.log("   npm run generate-ssl „ÅßSSLË®ºÊòéÊõ∏„ÇíÁîüÊàê„Åó„Å¶„Åè„Å†„Åï„ÅÑ");
    console.log("=================================");
  }
});

httpServer.on("error", (error: any) => {
  console.error("‚ùå HTTP„Çµ„Éº„Éê„Éº„Åß„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü:");
  console.error(error);

  if (error.code === "EADDRINUSE") {
    console.error(`„Éù„Éº„Éà ${HTTP_PORT} „ÅØÊó¢„Å´‰ΩøÁî®„Åï„Çå„Å¶„ÅÑ„Åæ„Åô`);
  }
});
